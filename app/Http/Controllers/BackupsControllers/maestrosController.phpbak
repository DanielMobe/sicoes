<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\ProfesoresMateriasGrupos as PMG;
use App\MateriasTmp as MateriasTMP;
use App\AlumnosTmp as AlumnosTmp;
use App\Kardex as Kardex;
use App\CalificacionesTmp as CalificacionesTmp;




class maestrosController extends Controller
{


    public function getGrupos(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) && ($request['id_maestro'] != '')){

            $grupos = PMG::select('grupo')->distinct()->get();

            if (!empty($grupos)) {
                $grupos_distinct = array ();
                foreach ($grupos as $grupo) {
                    array_push($grupos_distinct, $grupo['grupo']);
                }
                sort($grupos_distinct);
                $response = array(
                    'menssage'      => 'success',
                    'action'        => 'getGrupos',
                    'grupos'         => $grupos_distinct,
                    'codigo'        => 200
                );
                return response()->json($response, 200);
            }else{
                $response = array(
                    'menssage'      => 'No hay grupos disponibles para este Profesor.',
                    'action'        => 'getGrupos',
                    'codigo'        => 200
                );
                return response()->json($response, 200);
            }
        }else{
            $response = array(
                'menssage'      => 'El campo Profesor Id es requerido.',
                'action'        => 'getGrupos',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function getMaterias(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) && ($request['id_maestro'] != '')){

            $materias = MateriasTMP::select('id_materia', 'nombre', 'carrera')->get();

            if (!empty($materias)) {
                $response = array(
                    'menssage'      => 'success',
                    'action'        => 'getMaterias',
                    'materias'      => $materias,
                    'codigo'        => 200
                );
                return response()->json($response, 200);
            }else{
                $response = array(
                    'menssage'      => 'No hay materias para este Profesor.',
                    'action'        => 'getMaterias',
                    'codigo'        => 200
                );
                return response()->json($response, 200);
            }
        }else{
            $response = array(
                'menssage'      => 'El campo Profesor Id es requerido.',
                'action'        => 'getMaterias',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function getAlumnosByGrupo(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) 
            && (isset($request['grupoId'])) && (!empty($request['grupoId']))
        ){

            $alumnos = AlumnosTmp::select('matricula', 'nombre_alumno', 'apellidop_alumno', 'apellidom_alumno', 'carrera' ,'semestre', 'grupo')->get();

            if (!empty($alumnos)) {
                $response = array(
                    'menssage'      => 'success',
                    'action'        => 'getAlumnosByGrupo',
                    'alumnos'       => $alumnos,
                    'codigo'        => 200
                );
            }else{
                $response = array(
                    'menssage'      => 'No hay alumnos para este grupo.',
                    'action'        => 'getAlumnosByGrupo',
                    'codigo'        => 200
                );
            }

            
            return response()->json($response, 200);
        }else{
            $response = array(
                'menssage'      => 'El campo Profesor Id es requerido.',
                'action'        => 'getAlumnosByGrupo',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function getAlumnosByGrupoAndMateria(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) 
            && (isset($request['grupoId'])) && (!empty($request['grupoId'])) 
            && (isset($request['materiaId'])) && (!empty($request['materiaId']))
        ){
            $response = array(
                'menssage'      => 'No hay alumnos para este grupo y materia.',
                'action'        => 'getMaterias',
                'codigo'        => 200
            );
            return response()->json($response, 200);
        }else{
            $response = array(
                'menssage'      => 'El campo Profesor Id es requerido.',
                'action'        => 'getMaterias',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function setCalificacion(Request $request)
    {
        if(
            (isset($request['id_maestro'])) && (!empty($request['id_maestro'])) 
            && (isset($request['grupoId'])) && (!empty($request['grupoId'])) 
            && (isset($request['materiaId'])) && (!empty($request['materiaId']))
            && (isset($request['alumnoMatricula'])) && (!empty($request['alumnoMatricula']))
            && (isset($request['calificacionInt'])) && (!empty($request['calificacionInt']))
            && (isset($request['tipoCal'])) && (!empty($request['tipoCal']))
            && (isset($request['periodo'])) && (!empty($request['periodo']))
        ){

            CalificacionesTmp::create([
                'id_maestro'        => $request['id_maestro'],
                'grupoId'           => $request['grupoId'],
                'materiaId'         => $request['materiaId'],
                'alumnoMatricula'   => $request['alumnoMatricula'],
                'calificacionInt'   => $request['calificacionInt'],
                'tipoCal'           => $request['tipoCal'],
                'periodo'           => $request['periodo'],
            ]);

            $response = array(
                'menssage'      => 'success',
                'action'        => 'setCalificacion',
                'codigo'        => 200
            );
            return response()->json($response, 200);
        }else{
            $response = array(
                'menssage'      => 'La petición es sistemáticamente incorrecta.',
                'action'        => 'getMaterias',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function getCalificacion(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) 
            && (isset($request['grupoId'])) && (!empty($request['grupoId'])) 
            && (isset($request['materiaId'])) && (!empty($request['materiaId']))
            && (isset($request['alumnoMatricula'])) && (!empty($request['alumnoMatricula']))
        ){
            $response = array(
                'menssage'      => 'No se encontraron calificaciones registradas con estos datos.',
                'action'        => 'getMaterias',
                'codigo'        => 200
            );
            return response()->json($response, 200);
        }else{
            $response = array(
                'menssage'      => 'La petición es sistemáticamente incorrecta.',
                'action'        => 'getMaterias',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function updateCalificacion(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) 
            && (isset($request['grupoId'])) && (!empty($request['grupoId'])) 
            && (isset($request['materiaId'])) && (!empty($request['materiaId']))
            && (isset($request['alumnoMatricula'])) && (!empty($request['alumnoMatricula']))
            && (isset($request['calificacionInt'])) && (!empty($request['calificacionInt']))
            && (isset($request['tipoCal'])) && (!empty($request['tipoCal']))
        ){
            $response = array(
                'menssage'      => 'No se pudo asignar la calificación.',
                'action'        => 'getMaterias',
                'codigo'        => 200
            );
            return response()->json($response, 200);
        }else{
            $response = array(
                'menssage'      => 'La petición es sistemáticamente incorrecta.',
                'action'        => 'getMaterias',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }

    public function deleteCalificacion(Request $request)
    {
        if((isset($request['id_maestro'])) && (!empty($request['id_maestro'])) 
            && (isset($request['grupoId'])) && (!empty($request['grupoId'])) 
            && (isset($request['materiaId'])) && (!empty($request['materiaId']))
            && (isset($request['alumnoMatricula'])) && (!empty($request['alumnoMatricula']))
            && (isset($request['calificacionId'])) && (!empty($request['calificacionInt']))
        ){
            $response = array(
                'menssage'      => 'No se pudo asignar la calificación.',
                'action'        => 'getMaterias',
                'codigo'        => 200
            );
            return response()->json($response, 200);
        }else{
            $response = array(
                'menssage'      => 'La petición es sistemáticamente incorrecta.',
                'action'        => 'getMaterias',
                'codigo'        => 400
            );
            return response()->json($response, 400);
        }
    }
}
